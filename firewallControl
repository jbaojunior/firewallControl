#!/bin/bash
set -e

if [ $(id -u) != 0 ]
then
	echo "Execute this script as root or use sudo"
	exit 5
fi

OPTS=$(getopt -o 'm:c:C:p:zcalh' -n 'firewallControl' -- "$@")

if [ $? -ne 0  ]
then
   echo 'Some error happened ...'
   exit 1
fi

### Help function to help =]
HELP(){
    echo "Usage: ${0} [OPTION]..."
    printf "  -m module_name %6s Name of module that will be used to configure iptables\n"
    printf "  -z %18s Clean all iptables statistics\n"
    printf "  -a %18s Flush all rules and set ACCEPT as default action to all tables\n"
    printf "  -c module_file %6s File with modules name to be load. The format is one module per line. The default is \${CONFIG_DIRECTORY}/modules.fw\n"
    printf "  -C config_directory  Modules files directory. Default is /etc/ownFirewall\n"
    printf "  -l %18s List all modules can be used\n"
    printf "  -p module_name %6s Print the rules of modules. The parameter all will print the content of all modules"
    printf "  -h %18s Show this help\n"
}

eval set -- "${OPTS}"
unset OPTS

# Define some options
modules=""
STATS=0
ACCEPT=0
PRINT=0
LIST=0

### Do the options parse
while true
do
    case $1 in
        '-m')
            modules="${modules}${2}\n"
            shift 2    
            continue
        ;;
        '-c')
            loadModulesFile="$2"
            shift 2    
            continue
        ;;
        '-C')
            configDir="$2"
            shift 2    
            continue
        ;;
        '-z')
            STATS=1
            shift
            continue
        ;;
        '-a')
            ACCEPT=1
            shift
            continue
        ;;
        '-l')
            LIST=1
            shift
            break
        ;;
        '-p')
            PRINT=1
            modules=$2
            shift 2
            break
        ;;
        '-h')
            echo 'Show the help'
            HELP
            shift
            exit 0
        ;;
        '--')
            shift
            break
        ;;
        *)
            echo "Wrong option: $1. Please use some below options:"
            HELP
            exit 2    
        ;;
    esac
done    

### Do the right variable
if [ -z "${configDir}"  ]
then
  configDir="/etc/firewallControl"
fi

if [ -z "${loadModulesFile}" ]
then
  loadModulesFile="${configDir}/modules.fw"
fi

### Checking the options and permissions
if [ -d ${configDir} -a -r ${configDir} ]
then
  CONFIGDIR=1
else
  CONFIGDIR=0
fi

if [ -r ${loadModulesFile} -a -s ${loadModulesFile} -a -f ${loadModulesFile} ]
then
  LOAD_MODULES_FILE=1
else
  LOAD_MODULES_FILE=0
fi

if [ $(echo ${modules} | wc -c) -gt 1 ]
then
  MODULE=1
else
  MODULE=0
fi

if [ "${CONFIGDIR}" = 0 ]
then
  echo -e "Problems to read the configuration directory (${configDir}). Please configure with option '-C' and verify the permission"
  exit 2
fi

if [ "${LIST}" = 1 ]
then
    ls ${configDir}/modules
    exit 0
fi

if [ "${LOAD_MODULES_FILE}" = 0 -a "${ACCEPT}" = 0  ]
then
    echo -e "Don't exist modules to be load or the file can not be read. The default rules will be load.\nPlease configure with option '-c' or '-m' and verify the permissions if it is not right"
fi

### Function to verify the modules
verifyModule() {
  MODULE_PATH="${configDir}/modules"
  if [ ! -f "${MODULE_PATH}/${1}" -a ! -r "${MODULE_PATH}/${1}" ]
  then
    echo "Don't exist module "${1}" in directory "${configDir}"/modules. Please verify the directory and permissios"
    exit 3
  fi
}

### Function to load modules
loadModules() {
  verifyModule "${1}"
  source "${configDir}"/modules/"${1}"
}

## Print Modules
if [ "${PRINT}" = 1  -a ${MODULE} != 0 ]
then
    if [ "${modules}" = "all" ]
    then
        for i in `ls "${configDir}"/modules`
        do 
            printf "############### Module: %s %10s\n" "${i}"
            cat "${configDir}"/modules/"${i}"
            echo -e "\n"
        done
        exit 0
    else
        verifyModule "${i}"
        cat "${configDir}"/modules/"${modules}"
        exit 0
    fi
fi

### Verify if the option accept was activate
if [ "${ACCEPT}" = 1 ]
then
  loadModules flush
  loadModules policy-accept
  echo -e "Firewall rules load with success!"
  exit 0
fi

### Clean the stats
if [ "${STATS}" = 1 ]
then
  loadModules clean-stats
  echo -e "Firewall stats clean with success!"
  exit 0
fi

######## Do action
### The order is important
### Clean All Rules
loadModules flush

### Import loppback
loadModules loopback

### Default policy Drop
loadModules policy-drop

### Module web
loadModules web

### Import the modules in file
if [ "${LOAD_MODULES_FILE}" = 1 ]
then
  while read a
  do
    loadModules "${a}"
  done < ${loadModulesFile}
fi

### Modules load with -m parameter has priority
for i in $(echo -e "${modules}")
do
  loadModules "${i}"
done

### Import Safety rules here
### Because they can be invalidated by the rules above
loadModules safety

### load the logs
loadModules drop-log

### Drop all
loadModules drop-all

echo -e "Firewall rules load with success!"
